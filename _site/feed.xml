<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wzystal's Blog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 28 Feb 2017 23:50:04 +0800</pubDate>
    <lastBuildDate>Tue, 28 Feb 2017 23:50:04 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>安卓应用角标那些事儿</title>
        <description>&lt;h2 id=&quot;什么是应用角标&quot;&gt;什么是应用角标？&lt;/h2&gt;
&lt;p&gt;    应用角标最开始是在ios系统中出现的，大概长这样：
  &lt;img src=&quot;http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/f5dcc2ce5a984d7ad62269e25ff51e42.jpg&quot; alt=&quot;角标.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;    不知道从什么时候开始，国内各大安卓手机系统上，也慢慢出现了应用角标的身影，到现在几乎成为了安卓系统的标配，发张图片让大家近距离感受一下：
&lt;img src=&quot;http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/8bcf1bf26d4409ba9e9a36a0f4d9a832.png&quot; alt=&quot;screenshot.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;    但是有一点要特别提一下，那就是&lt;code class=&quot;highlighter-rouge&quot;&gt;原生的Android系统，是不支持应用角标的&lt;/code&gt;（这也是文章标题没有用“Android”的原因）。毕竟应用角标是一个带有争议的设计，有些强迫症用户对应用角标咬牙切齿，有些用户看不到应用角标又浑身痒痒，对于这一点我也只能说“仁者见仁，智者见智”吧。&lt;/p&gt;

&lt;h2 id=&quot;如何支持应用角标&quot;&gt;如何支持应用角标？&lt;/h2&gt;
&lt;p&gt;    安卓应用的角标是由Launcher支持的，而原生的Android系统Launcher并没有提供角标支持，所以各大手机厂商只能自己定制Launcher来实现，然后提供接口给外部使用。主流的做法都是通过广播Intent的形式来提供接口，不同的手机系统所支持的广播Intent也不太一样，所以需要针对不同的手机系统来做适配（恭喜你又成功跳入一个系统适配的坑！）。&lt;/p&gt;

&lt;h2 id=&quot;角标开源库介绍&quot;&gt;角标开源库介绍&lt;/h2&gt;
&lt;p&gt;    相信每个安卓开发者看到系统适配这几个字，都不会不由自主喷出一口老血。。。但是这次不用慌，因为已经有不怕死的家伙为我们造好了轮子，接下来就为大家隆重推出 &lt;a href=&quot;https://github.com/leolin310148/ShortcutBadger&quot;&gt;ShortcutBadger&lt;/a&gt; （github大法好啊～真是好～）。这个开源库为我们封装了各种系统适配的细节，如文档所描述的，拥有了ShortcutBadger，你也就免除了以下系统适配的烦恼：
  &lt;img src=&quot;http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/989eca40f7a45f24740a613796610260.png&quot; alt=&quot;角标02.png&quot; /&gt;&lt;br /&gt;
    但在实际使用时，你会发现，图片很美，现实却很残酷！经不完全测试（原谅我的“不完全”，毕竟安卓机型碎片化太过严重），我发现这个开源库对于小米、华为、vivo和oppo等主流机型的支持都是有各种问题的，要么完全不奏效，要么就有bug。当然这个开源库也在不断完善，但是在它还不够稳定的情况下，建议大家还是先用来当备选方案，支持一些冷门机型可以，主流机型还是自己适配比较靠谱点。&lt;/p&gt;

&lt;h2 id=&quot;特殊机型适配&quot;&gt;特殊机型适配&lt;/h2&gt;

&lt;h3 id=&quot;华为系列&quot;&gt;华为系列&lt;/h3&gt;
&lt;p&gt;   传送门：&lt;a href=&quot;http://developer.huawei.com/cn/consumer/wiki/index.php?title=%E5%8D%8E%E4%B8%BA%E6%A1%8C%E9%9D%A2%E8%A7%92%E6%A0%87%E4%BB%8B%E7%BB%8D&quot;&gt;华为角标官方文档&lt;/a&gt; &lt;br /&gt;
   按照华为官方文档的介绍，如果要获得应用角标支持，需要为应用申请华为证书，然后在“权签平台”下载开发者证书，再将开发者证书集成到应用中，整个流程跑下来还是很繁琐的。&lt;br /&gt;
   那么吃瓜群众肯定就要问了，有没有简单一点的方法呢？答案当然是有的！结合华为的《角标开发指导书》中的代码参考和亲身实践，我发现只需要其中两步，也可以实现华为角标支持（目前只验证了华为mate8 和华为 p7，其他机型手头暂时没有，欢迎大家补充）：&lt;/p&gt;

&lt;p&gt;1 在AndroidManifest.xml中申请华为角标权限&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&quot;com.huawei.android.launcher.permission.CHANGE_BADGE&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2 参考以下代码，设置应用角标即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bundle bundle = new Bundle();  
bundle.putString(&quot;package&quot;, context.getPackageName());  
String launchClassName = context.getPackageManager().getLaunchIntentForPackage(context.getPackageName()).getComponent().getClassName();  
bundle.putString(&quot;class&quot;, launchClassName);  
bundle.putInt(&quot;badgenumber&quot;, msgCount); 
context.getContentResolver().call(Uri.parse(&quot;content://com.huawei.android.launcher.settings/badge/&quot;), &quot;change_badge&quot;, null, bundle);  

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###小米系列
   传送门：&lt;a href=&quot;http://dev.xiaomi.com/docs/appsmarket/technical_docs/badge/&quot;&gt;小米角标官方文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;   在小米机型上，系统默认是支持应用角标的，不过支持的方式非常反人类，导致经常有用户来反馈说角标数字不对的问题。小米官方文档关于默认情况是这么描述的：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;当app向通知栏发送了一条通知 （通知不带进度条并且用户可以删除的），那么桌面app icon角标就会显示1。此时app显示的角标数是和通知栏里app发送的通知数对应的，即向通知栏发送了多少通知就会显示多少角标。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;   那么吃瓜群众肯定又要问了，What are you talking about？！不要慌，我举一个例子大家就明白了，比如说千牛客户端，每收到一条未读的聊天消息，就会往通知栏发送一条通知（由于业务需要，通知id都是同一个），假如用户收到了5条未读消息，理论上来说千牛的角标数字应该显示5，但是在小米机型上你会惊奇地发现角标数字居然是1。这是因为默认情况下，应用的角标数字跟应用往通知栏发送的通知数（&lt;code class=&quot;highlighter-rouge&quot;&gt;注意！这个通知数是根据通知id来计算的&lt;/code&gt;）相对应的，在刚刚说的场景中，&lt;code class=&quot;highlighter-rouge&quot;&gt;虽然千牛往通知栏发送了5条通知，但是按照通知id来统计时，对应的通知数就是1，所以角标数字也就是显示成1了&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;   小米官方可能也意识到了，这个奇葩的设计会导致很多用户产生困惑，所以在官方文档中也提供了修改角标数的接口。不同于其他手机系统通过广播来修改角标，小米系统是通过反射机制来修改角标，关键代码参考如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Field field = notification.getClass().getDeclaredField(&quot;extraNotification&quot;);
Object extraNotification = field.get(notification);
Method method = extraNotification.getClass().getDeclaredMethod(&quot;setMessageCount&quot;, int.class);
method.invoke(extraNotification, unreadCount);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###OPPO系列
   抱歉，没有发现官方文档。&lt;br /&gt;
   联系过oppo的开发者客服，客服MM表示：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;oppo角标提醒目前只针对内部软件还有微信、QQ开放，其他的暂时无法提供&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;   啊，多么痛的领悟～不过客服MM也及时发了一张好人卡：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;后续应该会计划对其他应用开放的，敬请关注我们的开发平台&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;   嗯，虽然被拒绝了，但是希望还是有的，那就继续关注&lt;a href=&quot;http://open.oppomobile.com/admin&quot;&gt;oppo开发者官网地址&lt;/a&gt;吧～&lt;/p&gt;

&lt;p&gt;###VIVO系列 
   抱歉，没有发现官方文档。&lt;br /&gt;
   不过最近有幸在网上看到一段代码，据说能支持vivo角标展示，抱着“死马当作活马医”的心态，我尝试了一把，最后发现居然奏效了。不多说了，贴代码共赏之：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Intent intent = new Intent(&quot;launcher.action.CHANGE_APPLICATION_NOTIFICATION_NUM&quot;);
intent.putExtra(&quot;packageName&quot;, context.getPackageName());
String launchClassName = context.getPackageManager().getLaunchIntentForPackage(context.getPackageName()).getComponent().getClassName();
intent.putExtra(&quot;className&quot;, launchClassName);
intent.putExtra(&quot;notificationNum&quot;, msgCount);
context.sendBroadcast(intent);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###Sony系列
   参考资料：&lt;a href=&quot;https://developer.sony.com/2016/06/23/xperia-home-badge-api-now-publicly-available/&quot;&gt;https://developer.sony.com/2016/06/23/xperia-home-badge-api-now-publicly-available/&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 28 Feb 2017 23:43:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/28/android-badger/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/28/android-badger/</guid>
        
        <category>Android</category>
        
        
      </item>
    
      <item>
        <title>《Android开发艺术探索》读书笔记 - View的工作原理</title>
        <description>&lt;h3 id=&quot;1-初识viewroot和decorview&quot;&gt;1. 初识ViewRoot和DecorView&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;ViewRoot扮演的是View的管理者角色，负责完成View的新建、更新和删除等操作。在代码层面，由ViewRootImpl类具体实现。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;View的绘制流程，具体实现在ViewRootImpl.performTraversals()中，代码十分复杂，主要分为measure、layout和draw三大步骤，需要花时间研读。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;DecorView是根视图，包含上下两部分：标题栏和内容栏，其中内容栏的id是固定的android.R.id.content，我们在Activity里调用setContentView的时候，其实就是在设置这个内容栏的布局。在代码层面，DecorView是PhoneWindow的一个内部类，继承自FrameLayout。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-理解measurespec&quot;&gt;2. 理解MeasureSpec&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;一个MeasureSpec封装了父容器传递给子View的布局要求。在测量过程中，系统会根据MeasureSpec来测量View，这个MeasureSpec由View本身想要的布局参数，结合父容器的MeasureSpec来生成。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在代码层面，MeasureSpec由32位的int值来表示，其中高2位代表测量模式（SpecMode），低30位代表测量规格（SpecSize）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;测量模式有三种:&lt;/li&gt;
  &lt;li&gt;UNSPECIFIED。父容器不做任何限制，要多大就给多大，这种情况一般用于系统内部。&lt;/li&gt;
  &lt;li&gt;EXACTLY。父容器指定精确大小为SpecSize，这个SpecSize就是View的最终大小。该模式对应于布局中的match-parent或者具体数值。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AT_MOST。父容器指定大小上限为SpecSize，View的大小不能超过SpecSize，具体是什么值取决于View的具体实现（默认为SpecSize）。该模式对应于布局中的wrap-content。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;对于子View，MeasureSpec由自身的布局参数和父容器的MeasureSpec共同决定，生成规则参见ViewGroup中的getChildMeasureSpec()，简单总结如下：&lt;/li&gt;
  &lt;li&gt;View的布局参数为match-parent时，生成View的MeasureSpec = 父容器SpecMode + parentSize&lt;/li&gt;
  &lt;li&gt;View的布局参数为wrap-content时，生成View的MeasureSpec = AT_MOST + parentSize&lt;/li&gt;
  &lt;li&gt;View的布局参数为固定宽高时，不论父容器的MeasureSpec是什么，生成View的MeasureSpec = EXACTLY + childSize&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-view的工作流程&quot;&gt;3. View的工作流程&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如果是单个View，自身调用measure方法就可以完成测量；如果是ViewGroup，除了完成自身的测量过程外，还需要遍历调用所有子View的measure过程&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;代码层面，View测量时的方法调用链路：measure()-&amp;gt;onMeasure()-&amp;gt;getDefaultSize()。在getDefaultSize()中可以看到：&lt;/li&gt;
  &lt;li&gt;EXACTLY和AT_MOST模式下，View的测量宽高其实就等于SpecSize。&lt;/li&gt;
  &lt;li&gt;UNSPECIFIED模式下，View的测量宽高计算规则（以宽度为例）：如果View没有设置背景，测量宽度=minWidth；如果设置了背景，测量宽度=max(minWidth, 背景宽度)。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 25 Feb 2017 23:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/25/android-art-04/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/25/android-art-04/</guid>
        
        <category>读书笔记</category>
        
        <category>Android</category>
        
        
      </item>
    
      <item>
        <title>2017，新博客，心启航！</title>
        <description>&lt;blockquote&gt;

  &lt;p&gt;2016.onDestory();&lt;br /&gt;
2017.onStart();&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2016就这样过去了，这一年磕磕碰碰，却没有为自己记录些什么，深感遗憾。&lt;/p&gt;

&lt;p&gt;2017，新博客，心启航～&lt;/p&gt;

</description>
        <pubDate>Sat, 11 Feb 2017 23:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/11/new-blog/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/11/new-blog/</guid>
        
        <category>生活</category>
        
        
      </item>
    
      <item>
        <title>LeetCode | Single Number II</title>
        <description>&lt;h3 id=&quot;原题描述&quot;&gt;&lt;a href=&quot;https://oj.leetcode.com/problems/single-number-ii/&quot;&gt;原题描述&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Given an array of integers, every element appears three times except for one. Find that single one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;解题思路&quot;&gt;解题思路&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;方法1&lt;br /&gt;
  通过一个HashMap来统计数字出现的次数，如果数字出现次数达到3，则将其移出HashMap，那么最终剩下的即为只出现过一次的那个数字。&lt;/li&gt;
  &lt;li&gt;方法2&lt;br /&gt;
  将数字表示为32位二进制数的形式，那么每个数字就等价于：32位二进制中，某些位的值为1。将这些数字按位相加，每一位统计1出现的次数并对3取余，那么最终的结果即为只出现过一次的那个数字。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;方法1和方法2都只需要O(N)的时间复杂度，但是方法1的空间复杂度为O(N)，方法2的空间复杂度虽然为O(1)，但是需要开辟一个大小32的整型数组。那么，不需要额外的空间，是否可以实现呢？
  答案是肯定的：参考&lt;a href=&quot;http://www.cnblogs.com/daijinqiao/p/3352893.html&quot;&gt;http://www.cnblogs.com/daijinqiao/p/3352893.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;实现代码&quot;&gt;实现代码&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * LeetCode | Single Number
 * @author wzystal
 */
public class Solution {
	// Given an array of integers, every element appears three times except for one. Find that single one.
	// 时间复杂度O(N),空间复杂度O(N)
	public static int singleNumber1(int[] A) {
		Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;Integer, Integer&amp;gt;();
		int len = A.length;
		for (int i = 0; i &amp;lt; len; i++) {
			if (map.containsKey(A[i])) {
				int count = map.get(A[i]);
				if (count == 2) {
					map.remove(A[i]);
				} else {
					map.put(A[i], ++count);
				}
			} else {
				map.put(A[i], 1);
			}
		}
		return map.keySet().iterator().next();
	}
	
	// Given an array of integers, every element appears three times except for one. Find that single one.
	// 时间复杂度O(N),空间复杂度O(1),但是需要开辟一个大小为32的整型数组
	public static int singleNumber2(int[] A) {
		if (A.length == 0)
			return 0;
		int[] bits = new int[32];
		int result = 0;
		for (int i = 0; i &amp;lt; 32; i++) {
			for (int j = 0; j &amp;lt; A.length; j++) {
				if (((A[j] &amp;gt;&amp;gt; i) &amp;amp; 1) == 1) {
					bits[i] = (bits[i] + 1) % 3;
				}
			}
			result |= (bits[i] &amp;lt;&amp;lt; i);
		}
		return result;
	}
	
	// Given an array of integers, every element appears three times except for one. Find that single one.
	// 时间复杂度O(N),空间复杂度O(1)
	public static int singleNumber3(int[] A) {
		int len = A.length;
		if (len == 0)
			return 0;
		int ones = 0, twos = 0, threes = 0;
		for (int i = 0; i &amp;lt; len; i++) {
			twos |= (ones &amp;amp; A[i]);
			ones ^= A[i];
			threes = ~(ones &amp;amp; twos);
			ones &amp;amp;= threes;
			twos &amp;amp;= threes;
		}
		return ones;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 14 Jul 2014 21:15:00 +0800</pubDate>
        <link>http://localhost:4000/2014/07/14/leecode-single-number-ii/</link>
        <guid isPermaLink="true">http://localhost:4000/2014/07/14/leecode-single-number-ii/</guid>
        
        <category>算法</category>
        
        <category>LeetCode</category>
        
        
      </item>
    
      <item>
        <title>LeetCode | Single Number</title>
        <description>&lt;h3 id=&quot;原题描述&quot;&gt;&lt;a href=&quot;https://oj.leetcode.com/problems/single-number/&quot;&gt;原题描述&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Given an array of integers, every element appears twice except for one. Find that single one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;解题思路&quot;&gt;解题思路&lt;/h3&gt;
&lt;p&gt;可以利用异或运算来实现。关于异或运算的几个法则：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;a ^ a = 0;
a ^ 0 = a;
a ^ b = b ^ a ;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;实现代码&quot;&gt;实现代码&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * LeetCode | Single Number
 * @author wzystal
 */
public class Solution {
	public int singleNumber(int[] A) {
		int result = 0;
		for (int i : A) {
			result ^= i;
		}
		return result;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 14 Jul 2014 19:21:00 +0800</pubDate>
        <link>http://localhost:4000/2014/07/14/leecode-single-number/</link>
        <guid isPermaLink="true">http://localhost:4000/2014/07/14/leecode-single-number/</guid>
        
        <category>算法</category>
        
        <category>LeetCode</category>
        
        
      </item>
    
      <item>
        <title>LeetCode | Copy List with Random Pointer</title>
        <description>&lt;h3 id=&quot;原题描述&quot;&gt;&lt;a href=&quot;https://oj.leetcode.com/problems/copy-list-with-random-pointer/&quot;&gt;原题描述&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
Return a deep copy of the list.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;解题思路&quot;&gt;解题思路&lt;/h3&gt;
&lt;p&gt;本题要复制的对象是带随机指针的单链表，随机指针指向单链表的某一个结点。
参考文章：&lt;a href=&quot;http://blog.csdn.net/linhuanmars/article/details/22463599&quot;&gt;http://blog.csdn.net/linhuanmars/article/details/22463599&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;实现代码&quot;&gt;实现代码&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/** 
 * Copy List with Random Pointer 
 * @author wzystal 
 */  
public class Solution {  
    class RandomListNode {  
        int label;  
        RandomListNode next, random;  
  
        public RandomListNode(int x) {  
            this.label = x;  
        }  
    }  
  
    // 时间复杂度O(n),空间复杂度O(n)  
    public RandomListNode copyRandomList1(RandomListNode head) {  
        if (head == null)  
            return head;  
        HashMap&amp;lt;RandomListNode, RandomListNode&amp;gt; map = new HashMap&amp;lt;&amp;gt;();  
        RandomListNode newHead = new RandomListNode(head.label);  
        map.put(head, newHead);  
        RandomListNode pre = newHead;  
        RandomListNode node = head.next;  
        while (node != null) {  
            RandomListNode newNode = new RandomListNode(node.label);  
            map.put(node, newNode);  
            pre.next = newNode;  
            pre = pre.next;  
            node = node.next;  
        }  
        node = head;  
        RandomListNode copyNode = newHead;  
        while (node != null) {  
            copyNode.random = map.get(node.random);  
            copyNode = copyNode.next;  
            node = node.next;  
        }  
        return newHead;  
    }  
  
    // 时间复杂度O(n),空间复杂度O(1)  
    public RandomListNode copyRandomList2(RandomListNode head) {  
        if (head == null)  
            return head;  
        RandomListNode node = head;  
        while (node != null) {  
            RandomListNode newNode = new RandomListNode(node.label);  
            newNode.next = node.next;  
            node.next = newNode;  
            node = newNode.next;  
        }  
        node = head;  
        while (node != null) {  
            if (node.random != null) {  
                node.next.random = node.random.next;  
            }  
            node = node.next.next;  
        }  
        RandomListNode newHead = head.next;  
        node = head;  
        while (node != null) {  
            RandomListNode newNode = node.next;  
            node.next = newNode.next;  
            if (newNode.next != null) {  
                newNode.next = newNode.next.next;  
            }  
            node = node.next;  
        }  
        return newHead;  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 14 Jul 2014 19:21:00 +0800</pubDate>
        <link>http://localhost:4000/2014/07/14/leecode-copy-list-with-random-pointer/</link>
        <guid isPermaLink="true">http://localhost:4000/2014/07/14/leecode-copy-list-with-random-pointer/</guid>
        
        <category>算法</category>
        
        <category>LeetCode</category>
        
        
      </item>
    
      <item>
        <title>LeetCode | Word Break</title>
        <description>&lt;h3 id=&quot;原题描述&quot;&gt;&lt;a href=&quot;https://oj.leetcode.com/problems/word-break/&quot;&gt;原题描述&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, given
s = “leetcode”,
dict = [“leet”, “code”].&lt;/p&gt;

&lt;p&gt;Return true because “leetcode” can be segmented as “leet code”.&lt;/p&gt;

&lt;h3 id=&quot;解题思路&quot;&gt;解题思路&lt;/h3&gt;
&lt;p&gt;动态规划思路求解。
对于任何一个字符串S（长度为N），如果S能被字典集 dict “割裂”（即S能由dict中的单词拼接而成），那么必定有：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;T(0,N) = T(0,i) &amp;amp;&amp;amp; T(i,N) ; 
T(i,j)表示字符串S从索引i到j所截取的部分，能被字典集dict割裂。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以，我们在遍历字符串S的时候，可以基于上述思路，每次将遍历得到的字符串S(0,i)划分为S(0,j)和S(j,i)，然后根据T(0,j) &amp;amp;&amp;amp; T(j,i)来判断S(0,i)能否被字典集dict割裂，同时我们在遍历过程中维护一个布尔数组can（can[i]==true表示S(0,i)能被字典集dict割裂），来避免重复计算。这样遍历并判断下去，can[len]的结果就是我们想要的解。&lt;/p&gt;

&lt;h3 id=&quot;实现代码&quot;&gt;实现代码&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/** 
 * LeetCode | Word Break 
 *  
 * @author wzystal@gmail.com 
 */  
public class Solution {  
    public boolean wordBreak(String s, Set&amp;lt;String&amp;gt; dict) {  
        if (s == null || s.length() == 0 || dict == null || dict.size() == 0)  
            return false;  
        int len = s.length();  
        boolean[] can = new boolean[len + 1];  
        can[0] = true;  
        for (int i = 1; i &amp;lt;= len; i++) {  
            for (int j = 0; j &amp;lt; i; j++) {  
                if (can[j] &amp;amp;&amp;amp; dict.contains(s.substring(j, i))) {  
                    can[i] = true;  
                    break;  
                }  
            }  
        }  
        return can[len];  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 02 Jul 2014 21:28:00 +0800</pubDate>
        <link>http://localhost:4000/2014/07/02/word-break/</link>
        <guid isPermaLink="true">http://localhost:4000/2014/07/02/word-break/</guid>
        
        <category>算法</category>
        
        <category>LeetCode</category>
        
        
      </item>
    
      <item>
        <title>LeetCode | Word Break II</title>
        <description>&lt;h3 id=&quot;原题描述&quot;&gt;&lt;a href=&quot;https://oj.leetcode.com/problems/word-break-ii/&quot;&gt;原题描述&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Return all such possible sentences.&lt;/p&gt;

&lt;p&gt;For example, given
s = “catsanddog”,
dict = [“cat”, “cats”, “and”, “sand”, “dog”].&lt;/p&gt;

&lt;p&gt;A solution is [“cats and dog”, “cat sand dog”].&lt;/p&gt;

&lt;h3 id=&quot;解题思路&quot;&gt;解题思路&lt;/h3&gt;
&lt;p&gt;动态规划+DFS&lt;/p&gt;

&lt;h3 id=&quot;实现代码&quot;&gt;实现代码&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/** 
 * LeetCode | Word Break II 
 * @author wzystal@gmail.com 
 */  
public class Solution {  
    List&amp;lt;String&amp;gt; records = new ArrayList&amp;lt;String&amp;gt;();  
  
    public List&amp;lt;String&amp;gt; wordBreak(String s, Set&amp;lt;String&amp;gt; dict) {  
        if (canBreak(s, dict)) {  
            dfsSearch(s, dict, &quot;&quot;);  
        }  
        return records;  
    }  
  
    private boolean canBreak(String s, Set&amp;lt;String&amp;gt; dict) {  
        if (s == null || s.length() == 0 || dict == null || dict.size()==0)  
            return false;  
        int len = s.length();  
        boolean[] can = new boolean[len + 1];  
        can[0] = true;  
        for (int i = 1; i &amp;lt;= len; i++) {  
            for (int j = 0; j &amp;lt; i; j++) {  
                if (can[j] &amp;amp;&amp;amp; dict.contains(s.substring(j, i))) {  
                    can[i] = true;  
                    break;  
                }  
            }  
        }  
        return can[len];  
    }  
  
    private void dfsSearch(String str, Set&amp;lt;String&amp;gt; dict, String result) {  
        int len = str.length();  
        if (len == 0) {  
            records.add(result);  
        }  
        for (int i = 0; i &amp;lt;= len; i++) {  
            String sub = str.substring(0,i);  
            if(dict.contains(sub)){  
                int curLen = result.length();  
                if(!result.equals(&quot;&quot;)){  
                    result += &quot; &quot;;  
                }  
                result += sub;  
                dfsSearch(str.substring(i), dict, result);  
                result = result.substring(0, curLen);  
            }  
        }  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Wed, 02 Jul 2014 19:21:00 +0800</pubDate>
        <link>http://localhost:4000/2014/07/02/word-break-ii/</link>
        <guid isPermaLink="true">http://localhost:4000/2014/07/02/word-break-ii/</guid>
        
        <category>算法</category>
        
        <category>LeetCode</category>
        
        
      </item>
    
      <item>
        <title>LeetCode | Linked List Cycle</title>
        <description>&lt;h3 id=&quot;原题描述&quot;&gt;&lt;a href=&quot;https://oj.leetcode.com/problems/linked-list-cycle/&quot;&gt;原题描述&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;判断一个单链表是否有环，若有环的话，返回环的入口点。空间复杂度为O(1)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;解题思路&quot;&gt;解题思路&lt;/h3&gt;
&lt;p&gt;快慢指针法。慢指针步长为1，快指针步长为2，两个指针同时从头结点开始扫描，若单链表存在环，则两个指针必定会相遇，而且是在慢指针遍历完环之前。原理解析可以参考：&lt;a href=&quot;http://blog.csdn.net/loveyou426/article/details/7927297&quot;&gt;http://blog.csdn.net/loveyou426/article/details/7927297&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;那么环的入口点又该怎么找呢？&lt;/p&gt;

&lt;p&gt;我们假设单链表长度为len，头结点到环入口点的距离为a，环入口点到相遇点的距离为b，整个环的长度为r。显然有len=a+r。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;由于相遇时慢指针还未转完一圈，所以慢指针的”行程”为(a+b)，快指针的”行程”则为慢指针”行程”的两倍:2(a+b);&lt;/li&gt;
    &lt;li&gt;我们假设快慢指针相遇时，快指针已经绕了环n圈，显然快指针的”行程”可以计算为:(a+b)+n*r;&lt;/li&gt;
    &lt;li&gt;结合1、2可知: 2(a+b)=(a+b)+n&lt;em&gt;r,即(a+b)=n&lt;/em&gt;r –&amp;gt; (a+b)=(n-1)&lt;em&gt;r+r –&amp;gt; (a+b)=(n-1)&lt;/em&gt;r+(len-a) –&amp;gt; a=(n-1)*r+(len-a-b)。其中(len-a-b)正好是相遇点到环入口的距离。也就是说，指针从头结点到环入口的距离，正好等于指针从相遇点到环入口的距离！&lt;/li&gt;
    &lt;li&gt;由3中结论，我们找到相遇点以后，可以同时设置两个指针，分别从头结点和相遇点开始遍历，由于头结点到环入口的距离等于相遇点到环入口的距离，所以当两个指针相遇时，它们的相遇点即为环的入口点！&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;实现代码&quot;&gt;实现代码&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/** 
 * LeetCode | Linked List Cycle 
 * @author Young Z. Wang 
 */  
public class Solution {  
    class ListNode {  
        int val;  
        ListNode next;  
  
        public ListNode(int val) {  
            this.val = val;  
            this.next = null;  
        }  
    }  
  
    // 判断单链表是否有环  
    public boolean hasCycle(ListNode head) {  
        if (head == null || head.next == null) return false;  
        ListNode slow = head, fast = head;  
        while (fast != null &amp;amp;&amp;amp; fast.next != null) {  
            slow = slow.next;  
            fast = fast.next.next;  
            if (fast == slow) return true;  
        }  
        return false;  
    }  
  
    // 若单链表存在环，返回环的入口点  
    public ListNode detectCycle(ListNode head) {  
        if (head == null || head.next == null) return null;  
        ListNode slow = head, fast = head;  
        while (fast != null &amp;amp;&amp;amp; fast.next != null) {  
            slow = slow.next;  
            fast = fast.next.next;  
            if (fast == slow) break;  
        }  
        if (fast == slow) {  
            ListNode n1 = head, n2 = slow;  
            while(n1 != n2){  
                n1 = n1.next;  
                n2 = n2.next;  
            }  
            return n1;  
        }  
        return null;  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 20 Jun 2014 20:50:00 +0800</pubDate>
        <link>http://localhost:4000/2014/06/20/linked-list-cycle/</link>
        <guid isPermaLink="true">http://localhost:4000/2014/06/20/linked-list-cycle/</guid>
        
        <category>算法</category>
        
        <category>LeetCode</category>
        
        
      </item>
    
      <item>
        <title>LeetCode | Reorder List</title>
        <description>&lt;h3 id=&quot;原题描述&quot;&gt;&lt;a href=&quot;https://oj.leetcode.com/problems/reorder-list/&quot;&gt;原题描述&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…&lt;br /&gt;
You must do this in-place without altering the nodes’ values.&lt;br /&gt;
For example, &lt;br /&gt;
Given {1,2,3,4}, reorder it to {1,4,2,3}.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;解题思路&quot;&gt;解题思路&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;将单链表从中点处拆分成两部分：head和middle，可以采用快慢指针的方法实现；&lt;/li&gt;
  &lt;li&gt;将middle部分单链表反转；&lt;/li&gt;
  &lt;li&gt;穿插式合并head和middle两部分。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;实现代码&quot;&gt;实现代码&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Reorder List  
public class Solution {  
    class ListNode {  
        int val;  
        ListNode next;  
  
        public ListNode(int val) {  
            this.val = val;  
            next = null;  
        }  
    }  
  
    public void reorderList(ListNode head) {  
        if (head == null || head.next == null)  
            return;  
        ListNode fast = head, slow = head;  
        while (fast != null &amp;amp;&amp;amp; fast.next != null &amp;amp;&amp;amp; fast.next.next != null) {  
            slow = slow.next;  
            fast = fast.next.next;  
        }  
        ListNode middle = slow.next;  
        slow.next = null;  
        middle = reverseList(middle);  
        ListNode n1 = head, n2 = middle;  
        mergeList(n1, n2);  
    }  
  
    //反转单链表  
    private ListNode reverseList(ListNode head) {  
        if (head == null || head.next == null)  
            return head;  
        ListNode pre = head, cur = head.next;  
        while (cur != null) {  
            ListNode temp = cur.next;  
            cur.next = pre;  
            pre = cur;  
            cur = temp;  
        }  
        head.next = null; //important!  
        return pre;  
    }  
  
    //穿插合并单链表  
    private void mergeList(ListNode n1, ListNode n2) {  
        ListNode t1, t2;  
        while (n2 != null) {  
            t1 = n1.next;  
            t2 = n2.next;  
            n1.next = n2;  
            n2.next = t1;  
            n1 = t1;  
            n2 = t2;  
        }  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 20 Jun 2014 20:17:00 +0800</pubDate>
        <link>http://localhost:4000/2014/06/20/reorder-list/</link>
        <guid isPermaLink="true">http://localhost:4000/2014/06/20/reorder-list/</guid>
        
        <category>算法</category>
        
        <category>LeetCode</category>
        
        
      </item>
    
  </channel>
</rss>
